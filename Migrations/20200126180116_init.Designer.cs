// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QcSupplier.Persistence;

namespace QcSupplier.Migrations {
  [DbContext(typeof(AppDbContext))]
  [Migration("20200126180116_init")]
  partial class init {
    protected override void BuildTargetModel(ModelBuilder modelBuilder) {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
          .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
          .HasAnnotation("Relational:MaxIdentifierLength", 63);

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<string>("ClaimType");

        b.Property<string>("ClaimValue");

        b.Property<int>("RoleId");

        b.HasKey("Id");

        b.HasIndex("RoleId");

        b.ToTable("AspNetRoleClaims");
      });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<string>("ClaimType");

        b.Property<string>("ClaimValue");

        b.Property<int>("UserId");

        b.HasKey("Id");

        b.HasIndex("UserId");

        b.ToTable("AspNetUserClaims");
      });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b => {
        b.Property<string>("LoginProvider");

        b.Property<string>("ProviderKey");

        b.Property<string>("ProviderDisplayName");

        b.Property<int>("UserId");

        b.HasKey("LoginProvider", "ProviderKey");

        b.HasIndex("UserId");

        b.ToTable("AspNetUserLogins");
      });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b => {
        b.Property<int>("UserId");

        b.Property<string>("LoginProvider");

        b.Property<string>("Name");

        b.Property<string>("Value");

        b.HasKey("UserId", "LoginProvider", "Name");

        b.ToTable("AspNetUserTokens");
      });

      modelBuilder.Entity("QcSupplier.Entities.Department", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<DateTime>("CreatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<string>("Name");

        b.Property<DateTime>("UpdatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.HasKey("Id");

        b.HasIndex("Name")
            .IsUnique();

        b.ToTable("Departments");
      });

      modelBuilder.Entity("QcSupplier.Entities.Download", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<DateTime>("CreatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int>("CreatorId");

        b.Property<string>("Detail");

        b.Property<string>("FileName");

        b.Property<long>("FileSize");

        b.Property<string>("Title");

        b.Property<DateTime>("UpdatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int?>("UpdaterId");

        b.HasKey("Id");

        b.HasIndex("CreatorId");

        b.HasIndex("Detail");

        b.HasIndex("Title");

        b.HasIndex("UpdaterId");

        b.ToTable("Downloads");
      });

      modelBuilder.Entity("QcSupplier.Entities.OutGoingData", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<DateTime>("CreatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int>("CreatorId");

        b.Property<string>("Detail");

        b.Property<string>("Invoice");

        b.Property<bool>("Judgemented")
            .ValueGeneratedOnAdd()
            .HasDefaultValue(false);

        b.Property<string>("Title");

        b.Property<DateTime>("UpdatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int?>("UpdaterId");

        b.Property<int>("VendorId");

        b.HasKey("Id");

        b.HasIndex("CreatedAt");

        b.HasIndex("CreatorId");

        b.HasIndex("Invoice");

        b.HasIndex("UpdaterId");

        b.HasIndex("VendorId");

        b.ToTable("OutGoingDatas");
      });

      modelBuilder.Entity("QcSupplier.Entities.OutGoingDataFile", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<DateTime>("CreatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int>("CreatorId");

        b.Property<string>("FileName");

        b.Property<long>("FileSize");

        b.Property<DateTime?>("JudgementAt");

        b.Property<int?>("JudgementId");

        b.Property<int>("OutGoingDataId");

        b.Property<bool?>("Passed");

        b.Property<DateTime>("UpdatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int?>("UpdaterId");

        b.Property<DateTime?>("ViewAt");

        b.Property<int?>("ViewerId");

        b.HasKey("Id");

        b.HasIndex("CreatorId");

        b.HasIndex("JudgementId");

        b.HasIndex("OutGoingDataId");

        b.HasIndex("UpdaterId");

        b.HasIndex("ViewerId");

        b.ToTable("OutGoingDataFiles");
      });

      modelBuilder.Entity("QcSupplier.Entities.Program", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<DateTime>("CreatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<bool>("Enabled");

        b.Property<string>("Name");

        b.Property<string>("PolicyName");

        b.Property<DateTime>("UpdatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.HasKey("Id");

        b.ToTable("Programs");

        b.HasData(
            new {
              Id = 1,
              CreatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 814, DateTimeKind.Unspecified).AddTicks(2650),
              Enabled = true,
              Name = "Supplier Evaluation",
              PolicyName = "SupplierEvaluation",
              UpdatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 992, DateTimeKind.Unspecified).AddTicks(4130)
            },
            new {
              Id = 2,
              CreatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 992, DateTimeKind.Unspecified).AddTicks(4680),
              Enabled = true,
              Name = "Download",
              PolicyName = "Download",
              UpdatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 992, DateTimeKind.Unspecified).AddTicks(4700)
            },
            new {
              Id = 3,
              CreatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 992, DateTimeKind.Unspecified).AddTicks(4710),
              Enabled = true,
              Name = "TNS Form",
              PolicyName = "TNSForm",
              UpdatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 992, DateTimeKind.Unspecified).AddTicks(4720)
            },
            new {
              Id = 4,
              CreatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 992, DateTimeKind.Unspecified).AddTicks(4730),
              Enabled = true,
              Name = "Supplier Information",
              PolicyName = "SupplierInformation",
              UpdatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 992, DateTimeKind.Unspecified).AddTicks(4730)
            },
            new {
              Id = 5,
              CreatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 992, DateTimeKind.Unspecified).AddTicks(4740),
              Enabled = true,
              Name = "Out Going Data",
              PolicyName = "OutGoingData",
              UpdatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 992, DateTimeKind.Unspecified).AddTicks(4740)
            },
            new {
              Id = 6,
              CreatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 992, DateTimeKind.Unspecified).AddTicks(4750),
              Enabled = true,
              Name = "Self Controlled IPP",
              PolicyName = "SelfControlledIPP",
              UpdatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 992, DateTimeKind.Unspecified).AddTicks(4760)
            });
      });

      modelBuilder.Entity("QcSupplier.Entities.Role", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<string>("ConcurrencyStamp")
            .IsConcurrencyToken();

        b.Property<DateTime>("CreatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<string>("Name")
            .HasMaxLength(256);

        b.Property<string>("NormalizedName")
            .HasMaxLength(256);

        b.Property<DateTime>("UpdatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.HasKey("Id");

        b.HasIndex("NormalizedName")
            .IsUnique()
            .HasName("RoleNameIndex");

        b.ToTable("AspNetRoles");

        b.HasData(
            new {
              Id = 1,
              ConcurrencyStamp = "640a9c12-765d-45b2-aa2b-5cdfb56fe6f8",
              CreatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 994, DateTimeKind.Unspecified).AddTicks(8120),
              Name = "Vendor",
              NormalizedName = "Vendor",
              UpdatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 994, DateTimeKind.Unspecified).AddTicks(8610)
            },
            new {
              Id = 2,
              ConcurrencyStamp = "23d2e497-a7eb-4cf3-a45c-093f654c8a85",
              CreatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 994, DateTimeKind.Unspecified).AddTicks(9060),
              Name = "Admin",
              NormalizedName = "Admin",
              UpdatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 994, DateTimeKind.Unspecified).AddTicks(9080)
            },
            new {
              Id = 3,
              ConcurrencyStamp = "f6f99828-1863-4aa6-b658-cf507c8bd3e4",
              CreatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 994, DateTimeKind.Unspecified).AddTicks(9100),
              Name = "SuperAdmin",
              NormalizedName = "Super Admin TNS",
              UpdatedAt = new DateTime(2020, 1, 27, 1, 1, 15, 994, DateTimeKind.Unspecified).AddTicks(9100)
            });
      });

      modelBuilder.Entity("QcSupplier.Entities.SelfControlledIPP", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<DateTime>("CreatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int>("CreatorId");

        b.Property<string>("Detail");

        b.Property<string>("FileName");

        b.Property<long>("FileSize");

        b.Property<DateTime>("SelectedDate");

        b.Property<DateTime>("UpdatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int?>("UpdaterId");

        b.Property<int>("VendorId");

        b.HasKey("Id");

        b.HasIndex("CreatorId");

        b.HasIndex("SelectedDate");

        b.HasIndex("UpdaterId");

        b.HasIndex("VendorId");

        b.ToTable("SelfControlledIPPs");
      });

      modelBuilder.Entity("QcSupplier.Entities.SupplierEvaluation", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<DateTime?>("ActionDate");

        b.Property<DateTime>("CreatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int>("CreatorId");

        b.Property<string>("Detail");

        b.Property<DateTime>("DueDate");

        b.Property<DateTime>("SelectedDate");

        b.Property<string>("TnsFileName");

        b.Property<long>("TnsFileSize");

        b.Property<DateTime>("UpdatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int?>("UpdaterId");

        b.Property<string>("VendorFileName");

        b.Property<long?>("VendorFileSize");

        b.Property<int>("VendorId");

        b.HasKey("Id");

        b.HasIndex("CreatorId");

        b.HasIndex("SelectedDate");

        b.HasIndex("UpdaterId");

        b.HasIndex("VendorId");

        b.ToTable("SupplierEvaluations");
      });

      modelBuilder.Entity("QcSupplier.Entities.SupplierInformation", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<DateTime>("CreatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int>("CreatorId");

        b.Property<string>("Detail");

        b.Property<string>("FileName");

        b.Property<long>("FileSize");

        b.Property<string>("Title");

        b.Property<DateTime>("UpdatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int?>("UpdaterId");

        b.Property<int>("VendorId");

        b.HasKey("Id");

        b.HasIndex("CreatorId");

        b.HasIndex("Detail");

        b.HasIndex("Title");

        b.HasIndex("UpdaterId");

        b.HasIndex("VendorId");

        b.ToTable("SupplierInformations");
      });

      modelBuilder.Entity("QcSupplier.Entities.TnsForm", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<DateTime>("CreatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int>("CreatorId");

        b.Property<string>("Detail");

        b.Property<string>("FileName");

        b.Property<long>("FileSize");

        b.Property<string>("Title");

        b.Property<DateTime>("UpdatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int?>("UpdaterId");

        b.HasKey("Id");

        b.HasIndex("CreatorId");

        b.HasIndex("Detail");

        b.HasIndex("Title");

        b.HasIndex("UpdaterId");

        b.ToTable("TnsForms");
      });

      modelBuilder.Entity("QcSupplier.Entities.User", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<int>("AccessFailedCount");

        b.Property<string>("ConcurrencyStamp")
            .IsConcurrencyToken();

        b.Property<DateTime>("CreatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<int?>("DepartmentId");

        b.Property<string>("Email")
            .HasMaxLength(256);

        b.Property<bool>("EmailConfirmed");

        b.Property<bool>("LockoutEnabled");

        b.Property<DateTimeOffset?>("LockoutEnd");

        b.Property<string>("NormalizedEmail")
            .HasMaxLength(256);

        b.Property<string>("NormalizedUserName")
            .HasMaxLength(256);

        b.Property<string>("PasswordHash");

        b.Property<string>("PhoneNumber");

        b.Property<bool>("PhoneNumberConfirmed");

        b.Property<string>("SecurityStamp");

        b.Property<bool>("TwoFactorEnabled");

        b.Property<DateTime>("UpdatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<string>("UserName")
            .HasMaxLength(256);

        b.HasKey("Id");

        b.HasIndex("DepartmentId");

        b.HasIndex("Email")
            .IsUnique();

        b.HasIndex("NormalizedEmail")
            .HasName("EmailIndex");

        b.HasIndex("NormalizedUserName")
            .IsUnique()
            .HasName("UserNameIndex");

        b.ToTable("AspNetUsers");

        b.HasData(
            new {
              Id = 1,
              AccessFailedCount = 0,
              ConcurrencyStamp = "5541554a-a244-450d-a315-1b11699100ff",
              CreatedAt = new DateTime(2020, 1, 27, 1, 1, 16, 15, DateTimeKind.Unspecified).AddTicks(5530),
              Email = "admin@tns.com",
              EmailConfirmed = true,
              LockoutEnabled = false,
              NormalizedEmail = "ADMIN@TNS.COM",
              NormalizedUserName = "ADMIN",
              PasswordHash = "AQAAAAEAACcQAAAAEOEkf8ph/OEJYEpuQAvN3/ykEPwKCGeqr/Ibsynez8RqA6MrdnBL8iaXSlAzaPxOzA==",
              PhoneNumberConfirmed = false,
              SecurityStamp = "",
              TwoFactorEnabled = false,
              UpdatedAt = new DateTime(2020, 1, 27, 1, 1, 16, 15, DateTimeKind.Unspecified).AddTicks(6190),
              UserName = "admin"
            });
      });

      modelBuilder.Entity("QcSupplier.Entities.UserProgram", b => {
        b.Property<int>("UserId");

        b.Property<int>("ProgramId");

        b.HasKey("UserId", "ProgramId");

        b.HasIndex("ProgramId");

        b.ToTable("UserPrograms");
      });

      modelBuilder.Entity("QcSupplier.Entities.UserRole", b => {
        b.Property<int>("UserId");

        b.Property<int>("RoleId");

        b.HasKey("UserId", "RoleId");

        b.HasIndex("RoleId");

        b.ToTable("AspNetUserRoles");

        b.HasData(
            new {
              UserId = 1,
              RoleId = 3
            });
      });

      modelBuilder.Entity("QcSupplier.Entities.UserVendor", b => {
        b.Property<int>("UserId");

        b.Property<int>("VendorId");

        b.HasKey("UserId", "VendorId");

        b.HasIndex("VendorId");

        b.ToTable("UserVendors");
      });

      modelBuilder.Entity("QcSupplier.Entities.Vendor", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd();

        b.Property<DateTime>("CreatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.Property<string>("Email");

        b.Property<string>("Name");

        b.Property<bool>("SendIPP");

        b.Property<DateTime>("UpdatedAt")
            .ValueGeneratedOnAdd()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        b.HasKey("Id");

        b.HasIndex("Email")
            .IsUnique();

        b.HasIndex("Name")
            .IsUnique();

        b.ToTable("Vendors");
      });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b => {
        b.HasOne("QcSupplier.Entities.Role")
            .WithMany()
            .HasForeignKey("RoleId")
            .OnDelete(DeleteBehavior.Cascade);
      });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b => {
        b.HasOne("QcSupplier.Entities.User")
            .WithMany()
            .HasForeignKey("UserId")
            .OnDelete(DeleteBehavior.Cascade);
      });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b => {
        b.HasOne("QcSupplier.Entities.User")
            .WithMany()
            .HasForeignKey("UserId")
            .OnDelete(DeleteBehavior.Cascade);
      });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b => {
        b.HasOne("QcSupplier.Entities.User")
            .WithMany()
            .HasForeignKey("UserId")
            .OnDelete(DeleteBehavior.Cascade);
      });

      modelBuilder.Entity("QcSupplier.Entities.Download", b => {
        b.HasOne("QcSupplier.Entities.User", "Creator")
            .WithMany("DownloadCreators")
            .HasForeignKey("CreatorId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.User", "Updater")
            .WithMany("DownloadUpdaters")
            .HasForeignKey("UpdaterId")
            .OnDelete(DeleteBehavior.Restrict);
      });

      modelBuilder.Entity("QcSupplier.Entities.OutGoingData", b => {
        b.HasOne("QcSupplier.Entities.User", "Creator")
            .WithMany("OutGoingDataCreators")
            .HasForeignKey("CreatorId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.User", "Updater")
            .WithMany("OutGoingDataUpdaters")
            .HasForeignKey("UpdaterId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.Vendor", "Vendor")
            .WithMany("OutGoingDatas")
            .HasForeignKey("VendorId")
            .OnDelete(DeleteBehavior.Restrict);
      });

      modelBuilder.Entity("QcSupplier.Entities.OutGoingDataFile", b => {
        b.HasOne("QcSupplier.Entities.User", "Creator")
            .WithMany("OutGoingDataFileCreators")
            .HasForeignKey("CreatorId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.User", "Judgementor")
            .WithMany("OutGoingDataFileJudgementors")
            .HasForeignKey("JudgementId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.OutGoingData", "OutGoingData")
            .WithMany("Files")
            .HasForeignKey("OutGoingDataId")
            .OnDelete(DeleteBehavior.Cascade);

        b.HasOne("QcSupplier.Entities.User", "Updater")
            .WithMany("OutGoingDataFileUpdaters")
            .HasForeignKey("UpdaterId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.User", "Viewer")
            .WithMany("OutGoingDataFileViewers")
            .HasForeignKey("ViewerId")
            .OnDelete(DeleteBehavior.Restrict);
      });

      modelBuilder.Entity("QcSupplier.Entities.SelfControlledIPP", b => {
        b.HasOne("QcSupplier.Entities.User", "Creator")
            .WithMany("SelfControlledIPPCreators")
            .HasForeignKey("CreatorId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.User", "Updater")
            .WithMany("SelfControlledIPPUpdaters")
            .HasForeignKey("UpdaterId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.Vendor", "Vendor")
            .WithMany("SelfControlledIPPs")
            .HasForeignKey("VendorId")
            .OnDelete(DeleteBehavior.Restrict);
      });

      modelBuilder.Entity("QcSupplier.Entities.SupplierEvaluation", b => {
        b.HasOne("QcSupplier.Entities.User", "Creator")
            .WithMany("SupplierEvaluationCreators")
            .HasForeignKey("CreatorId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.User", "Updater")
            .WithMany("SupplierEvaluationUpdaters")
            .HasForeignKey("UpdaterId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.Vendor", "Vendor")
            .WithMany("SupplierEvaluations")
            .HasForeignKey("VendorId")
            .OnDelete(DeleteBehavior.Restrict);
      });

      modelBuilder.Entity("QcSupplier.Entities.SupplierInformation", b => {
        b.HasOne("QcSupplier.Entities.User", "Creator")
            .WithMany("SupplierInformationCreators")
            .HasForeignKey("CreatorId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.User", "Updater")
            .WithMany("SupplierInformationUpdaters")
            .HasForeignKey("UpdaterId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.Vendor", "Vendor")
            .WithMany("SupplierInformations")
            .HasForeignKey("VendorId")
            .OnDelete(DeleteBehavior.Restrict);
      });

      modelBuilder.Entity("QcSupplier.Entities.TnsForm", b => {
        b.HasOne("QcSupplier.Entities.User", "Creator")
            .WithMany("TnsFormCreators")
            .HasForeignKey("CreatorId")
            .OnDelete(DeleteBehavior.Restrict);

        b.HasOne("QcSupplier.Entities.User", "Updater")
            .WithMany("TnsFormUpdaters")
            .HasForeignKey("UpdaterId")
            .OnDelete(DeleteBehavior.Restrict);
      });

      modelBuilder.Entity("QcSupplier.Entities.User", b => {
        b.HasOne("QcSupplier.Entities.Department", "Department")
            .WithMany("Users")
            .HasForeignKey("DepartmentId")
            .OnDelete(DeleteBehavior.Restrict);
      });

      modelBuilder.Entity("QcSupplier.Entities.UserProgram", b => {
        b.HasOne("QcSupplier.Entities.Program", "Program")
            .WithMany("UserPrograms")
            .HasForeignKey("ProgramId")
            .OnDelete(DeleteBehavior.Cascade);

        b.HasOne("QcSupplier.Entities.User", "User")
            .WithMany("UserPrograms")
            .HasForeignKey("UserId")
            .OnDelete(DeleteBehavior.Cascade);
      });

      modelBuilder.Entity("QcSupplier.Entities.UserRole", b => {
        b.HasOne("QcSupplier.Entities.Role", "Role")
            .WithMany("UserRoles")
            .HasForeignKey("RoleId")
            .OnDelete(DeleteBehavior.Cascade);

        b.HasOne("QcSupplier.Entities.User", "User")
            .WithMany("UserRoles")
            .HasForeignKey("UserId")
            .OnDelete(DeleteBehavior.Cascade);
      });

      modelBuilder.Entity("QcSupplier.Entities.UserVendor", b => {
        b.HasOne("QcSupplier.Entities.User", "User")
            .WithMany("UserVendors")
            .HasForeignKey("UserId")
            .OnDelete(DeleteBehavior.Cascade);

        b.HasOne("QcSupplier.Entities.Vendor", "Vendor")
            .WithMany("UserVendors")
            .HasForeignKey("VendorId")
            .OnDelete(DeleteBehavior.Cascade);
      });
#pragma warning restore 612, 618
    }
  }
}
